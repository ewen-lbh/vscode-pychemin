---
name: PyChemin
scopeName: source.pychemin

repository:
  interpolable-string:
    patterns:
      match: .*(#[^\w_]+).*
      name: string.unquoted
      captures:
        1: { name: string.interpolated }

patterns:
# comment
- match: // .*
  name: comment.line.double-slash

# python code
- begin: ^\{
  end: \}$
  beginCaptures: { 0: { name: punctuation.bracket }}
  endCaptures: { 0: { name: punctuation.bracket }}
  patterns:
    - include: source.python
  
# input, input_required
- begin: ^(>[>*])
  end: $
  beginCaptures: 
    1: { name: keyword.control }
  contentName: string.unquoted
  patterns:
    - match: "[;,]"
      name: punctuation.separator

# input_fallback, input_fallback_and_continue
- match: (>\?\.?)
  captures:
    1: { name: keyword.control }

# load_file
- match: ^\s*(->) (.+)
  captures:
    1: { name: keyword.operator }
    2: { name: entity.other.attribute-name }

# input_hint
- match: ^\s*(\?) (.+)
  name: markup.quote.markdown

# char_line
- match: (\[)([^\]]+)(\]) (.+)
  captures:
    1: { name: punctuation.bracket }
    2: { name: entity.name.type }
    3: { name: punctuation.bracket }
    4: { name: string.unquoted }

# 
# - begin: ^\{
#   include: source.python
#   end: \}$

- match: (===+) ([^=]+) (===+)
  name: heading.1.markdown
  captures:
    1: { name: punctuation.definition.heading.markdown }
    2: { name: entity.name }
    3: { name: punctuation.definition.heading.markdown }
  
- match: (---+) ([^-]+) (---+)
  name: heading.2.markdown
  captures:
    1: { name: punctuation.definition.heading.markdown }
    2: { name: entity.name }
    3: { name: punctuation.definition.heading.markdown }

- match: (@)([\w_]+(:))?([\w_]+) ([+*/=-])(\d+%?)
  captures:
    1: { name: keyword.operator }
    2: { name: entity.name.type }
    3: { name: keyword.operator }
    4: { name: entity.name.function }
    5: { name: keyword.operator }
    6: { name: constant.numeric }
- match: (@)([\w_]+(:))?([\w_]+) (reset)
  captures:
    1: { name: keyword.operator }
    2: { name: entity.name.type }
    3: { name: keyword.operator }
    4: { name: entity.name.function }
    5: { name: keyword.operator }

- begin: ^\s*(=\?)
  end: $
  beginCaptures:
    1: { name: keyword.control }
  patterns:
    - include: source.python

- match: =!
  name: keyword.control

- match: (/)(.+)
  captures:
    1: { name: keyword.operator }
    2: { name: entity.other.attribute-name }
